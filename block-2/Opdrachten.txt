CC 1
	Sentential form: een verzameling van terminal en nonterminal symbols, die samen een goede zin in de taal vormt
	parse tree: een boomstructuur die de zin uit de taal weergeeft
	ambiguity: dat er in een grammar op een bepaald punt meerdere verschillende acties mogelijk zijn.
	left/right recursion: X -> X a is left, X -> a X is right
	recursive-descent parsing: een parser opgebouwd uit mutual recursive (dat ze weer in elkaar volgen) procedures die een van de uitkomsten van de grammar laten zien
	LL(x): LeftToRightLeftmost, met x naar voren mogen kijken
	bottom-up parsing: beginnen met "onderaan" kijken en wat je daar tegenkomt
	LR(x): LeftToRightRightmost, met x naar voren mogen kijken
CC 2
	1)
		a a a n v n e
		Leftmost:
		(1) alleen Modifier Modifier gebruikt
		Sentence 
		1 -> Subject verb Object endmark 
		3 -> Modifier Subject verb Object endmark
		7 -> Modifier Modifier Subject verb Object endmark 
		7 -> Modifier Modifier Modifier Subject verb Object endmark
		6 -> adjective Modifier Modifier Subject verb Object endmark
		6 -> adjective adjective Modifier Subject verb Object endmark
		6 -> adjective adjective adjective Subject verb Object endmark
		2 -> adjective adjective adjective noun verb Object endmark
		4 -> adjective adjective adjective noun verb noun endmark
		
		(2) alleen Modifier Subject gebruikt
		Sentence 
		1 -> Subject verb Object endmark 
		3 -> Modifier Subject verb Object endmark
		3 -> Modifier Modifier Subject verb Object endmark 
		3 -> Modifier Modifier Modifier Subject verb Object endmark
		6 -> adjective Modifier Modifier Subject verb Object endmark
		6 -> adjective adjective Modifier Subject verb Object endmark
		6 -> adjective adjective adjective Subject verb Object endmark
		2 -> adjective adjective adjective noun verb Object endmark
		4 -> adjective adjective adjective noun verb noun endmark
		
		(3) Combinatie
		Sentence 
		1 -> Subject verb Object endmark 
		3 -> Modifier Subject verb Object endmark
		7 -> Modifier Modifier Subject verb Object endmark 
		3 -> Modifier Modifier Modifier Subject verb Object endmark
		6 -> adjective Modifier Modifier Subject verb Object endmark
		6 -> adjective adjective Modifier Subject verb Object endmark
		6 -> adjective adjective adjective Subject verb Object endmark
		2 -> adjective adjective adjective noun verb Object endmark
		4 -> adjective adjective adjective noun verb noun endmark
		
		(4) Combinatie		
		Sentence 
		1 -> Subject verb Object endmark 
		3 -> Modifier Subject verb Object endmark
		3 -> Modifier Modifier Subject verb Object endmark 
		7 -> Modifier Modifier Modifier Subject verb Object endmark
		6 -> adjective Modifier Modifier Subject verb Object endmark
		6 -> adjective adjective Modifier Subject verb Object endmark
		6 -> adjective adjective adjective Subject verb Object endmark
		2 -> adjective adjective adjective noun verb Object endmark
		4 -> adjective adjective adjective noun verb noun endmark
		
		Rightmost:
		(1) Alleen regel 7
		Sentence
		1 -> Subject verb Object endmark
		4 -> Subject verb noun endmark
		3 -> Modifier Subject verb noun endmark
		2 -> Modifier noun verb noun endmark
		7 -> Modifier Modifier noun verb noun endmark
		6 -> Modifier adjective noun verb noun endmark
		7 -> Modifier Modifier adjective noun verb noun endmark
		6 -> Modifier adjective adjective noun verb noun endmark
		7 -> adjective adjective adjective noun verb noun endmark
		(2) Alleen regel 3
		Sentence
		1 -> Subject verb Object endmark
		4 -> Subject verb noun endmark
		3 -> Modifier Subject verb noun endmark
		3 -> Modifier Modifier Subject verb noun endmark
		3 -> Modifier Modifier Modifier Subject verb noun endmark
		2 -> Modifier Modifier Modifier noun verb noun endmark
		7 -> Modifier Modifier adjective noun verb noun endmark
		6 -> Modifier adjective adjective noun verb noun endmark
		7 -> adjective adjective adjective noun verb noun endmark
		(3) Combinatie
		Sentence
		1 -> Subject verb Object endmark
		4 -> Subject verb noun endmark
		3 -> Modifier Subject verb noun endmark
		3 -> Modifier Modifier Subject verb noun endmark
		2 -> Modifier Modifier noun verb noun endmark
		7 -> Modifier Modifier Modifier noun verb noun endmark
		7 -> Modifier Modifier adjective noun verb noun endmark
		6 -> Modifier adjective adjective noun verb noun endmark
		7 -> adjective adjective adjective noun verb noun endmark
	2) Bij leftmost is het 2 en bij rightmost is het ook 2
	3) Door Modifier -> Modifier Modifier te verwijderen
		
CC 3
	Alles wat niks oplevert is achterwegen ge
	Begin initialisatie:
		First[Stat] = {}
		First[assign] = {assign}
		First[if] = {if}
		First[expr] = {expr}
		First[then] = {then}
		First[ElsePart] = {}
		First[else] = {else}
		First[epsilon] = {epsilon}
	Whileloop 1
		First[Stat] = {} U {assign, if} = {assign, if}
		First[ElsePart] = {} U {else, epsilon} = {else, epsilon}
	Whileloop 2
		First[Stat] = {assign, if}
		First[ElsePart] = {else, epsilon}
	
	Begin initialisatie:
		Follow[Stat] = {}
		Follow[ElsePart] = {}
	Whileloop 1
	-- regel 1
		Trailer = Follow[Stat]
		Trailer = First[if]
		Trailer = First[expr]
		Trailer = First[then]
		Follow[Stat] = Follow[Stat] U Trailer = {} U {then} = {then}
		Trailer = First[Stat]
		Follow[ElsePart] = Follow[ElsePart] U Trailer = {} U {} = {}
	-- regel 3
		Trailer = First[ElsePart]
		Trailer = First[else]
		Follow[Stat] = Follow[Stat] U First[else] = {then} U {else} = {then, else}
		Trailer = First[Stat]
		
	First+[Stat->assign]=First[assign]={assign}
	First+[Stat->if expr then Stat ElsePart] = First[if]={if}
	First+[ElsePart->else Stat] = First[else]={else}
	First+[ElsePart->epsilon] = First[epsilon] U Follow[ElsePart] = {epsilon}
	
	Je kan hiermee niet alle terminials bereiken

CC 4
	R vervangen door:
	R -> aba | caba | abaR' | cabaR'
	R' -> bcR' | bc
	Dus over:
	L -> Ra | Qba
	R -> aba | caba | abaR' | cabaR'
	R' -> bcR' | bc
	Q -> bbc | bc
	
	Bepalen van First:
	initialisatie
		First[L] = {}
		First[R] = {}
		First[R'] = {}
		First[Q] = {}
		First[a] = {a}
		First[b] = {b}
		First[c] = {c}
	
	Whileloop 1
	- Regel l L -> Ra 
		rhs = First[R] = {}
		First[L] = First[L] U rhs = {}		
	- Regel 2 L -> Qba
		rhs = First[Q] = {}
		First[L] = First[L] U rhs = {}		
	- Regel 3 R -> aba
		rhs = First[a] = {a}
		First[R] = First[R] U rhs = {a}
	- Regel 4 R -> caba en Regel 5 R -> abaR' en Regel 6 R -> cabaR' 
		rhs = First[c] = {c}
		First[R] = First[R] U rhs = {a, c}
	- Regel 7 R'-> bcR' en Regel 8 R'-> bc
		rhs = First[b] = {b}
		First[R'] = First[R'] U rhs = {b}
	- Regel 9 Q -> bbc en Regel 10 Q -> bc
		rhs = First[b] = {b}
		First[Q] = First[Q] U rhs = {b}
		
	Geen verdere veranderingen want epsilon is er niet
	
	Bepalen van Follow
	initialisatie
		Follow[L] = {}
		Follow[R] = {}
		Follow[Q] = {}
		Follow[R'] = {}
		
	Whileloop 1
	- Regel l L -> Ra 
		Trailer = Follow[L]
		Follow[R] = Follow[R] U Trailer = {}
		Trailer = First[R] = {a, c}
	- Regel 2 L -> Qba
		Trailer = Follow[L]
		Follow[Q] = Follow[Q] U Trailer = {}
		Trailer = First[Q] ={b}
	- Regel 3 R -> aba, voor regel 4, 8, 9 en 10 gebeurd er iets soortgelijks
		Trailer = Follow[R]
		Trailer = First[a]
		Trailer = First[b]
		Trailer = First[a]
		// Er gebeurd hier dus niks
	- Regel 5 R -> abaR'
		Trailer = Follow[R]
		Trailer = First[a]
		Trailer = First[b]
		Trailer = First[a] = {a}
		Follow[R'] = Follow[R'] U Trailer = {a}
		Trailer = First[R']
	- Regel 6 R -> cabaR' 
		Trailer = Follow[R]
		Trailer = First[c]
		Trailer = First[a]
		Trailer = First[b]
		Trailer = First[a] = {a}
		Follow[R'] = Follow[R'] U Trailer = {a}
		Trailer = First[R']
	- Regel 7 R'-> bcR' 
		Trailer = Follow[R'] = {a}
		Trailer = First[b]
		Trailer = First[c] = {c}
		Follow[R'] = Follow[R'] U Trailer = {a, c}
		
	Whileloop 2
	- Regel l L -> Ra 
		//Gebeurd niks
	- Regel 2 L -> Qba
		Gebeurd niks
	- Regel 3 R -> aba, voor regel 4, 8, 9 en 10 gebeurd er iets soortgelijks
		//Gebeurd niks
	- Regel 5 R -> abaR'
		//Gebeurd niks
	- Regel 6 R -> cabaR' 
		//Gebeurd niks
	- Regel 7 R'-> bcR' 
		// Gebeurd niks
	Er gebeurd niks nieuws bij een tweede whileloop
	
	First+
	First+(L-> Ra) = First[R] ={a, c}
	First+(L-> Qba) = First[R] ={b}
	First+(R->aba) = First[a] = {a}	
	First+(R->caba) = First[c] = {c}
	First+(R->abaR') = First[a] = {a}
	First+(R->cabaR') = First[c] = {c}
	First[R'->bcR'] = First[b] = {b}
	First[R'-> bc] = First[b] = {b}
	First[Q->bbc] = First[b] = {b}
	First[Q->bc] = First[b] = {b}
		
	- Regel l L -> Ra 
		rhs = First[R] = {}
		First[L] = First[L] U rhs = {}		
	- Regel 2 L -> Qba
		rhs = First[Q] = {}
		First[L] = First[L] U rhs = {}		
	- Regel 3 R -> aba
		rhs = First[a] = {a}
		First[R] = First[R] U rhs = {a}
	- Regel 4 R -> caba en Regel 5 R -> abaR' en Regel 6 R -> cabaR' 
		rhs = First[c] = {c}
		First[R] = First[R] U rhs = {a, c}
	- Regel 7 R'-> bcR' en Regel 8 R'-> bc
		rhs = First[b] = {b}
		First[R'] = First[R'] U rhs = {b}
	- Regel 9 Q -> bbc en Regel 10 Q -> bc
		rhs = First[b] = {b}
		First[Q] = First[Q] U rhs = {b}
			